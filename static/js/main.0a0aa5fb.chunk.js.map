{"version":3,"sources":["component/ContactForm/ContactForm.module.css","component/ListContact/ListContact.module.css","redux/partOfRedux/contacts-action.js","redux/partOfRedux/contacts-reducer.js","redux/store.js","component/ListItem/ListItem.js","redux/partOfRedux/contacts-operations.js","redux/partOfRedux/contacts-selectors.js","component/ContactForm/ContactForm.js","component/ListContact/ListContact.js","App.js","index.js"],"names":["module","exports","getContactsRequest","createAction","getContactsSuccess","getContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","filterContacts","items","createReducer","action","_","payload","state","filter","id","contactsReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contact","Reducer","devTools","process","ListItem","mass","onDelete","undefined","map","text","number","type","onClick","axios","defaults","baseURL","obj","dispatch","post","then","data","catch","error","delete","get","getContacts","getFilter","getVisibleContacts","createSelector","contacts","toLowerCase","includes","connect","addContactToRedux","contactsOperations","useState","setContact","className","styles","mainConteiner","conteiner","name","value","onChange","event","target","includeContacts","item","nameContact","alert","button","contactsSelectors","onFilter","contactsActions","ListContacts","filterText","setFilterText","useEffect","inputTextFilter","placeholder","e","currentTarget","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,cAAgB,qC,mBCA7ED,EAAOC,QAAU,CAAC,gBAAkB,uC,iJCerB,GACbC,mBAfyBC,YAAa,+BAgBtCC,mBAfyBD,YAAa,+BAgBtCE,iBAfuBF,YAAa,6BAgBpCG,mBAdyBH,YAAa,+BAetCI,mBAdyBJ,YAAa,+BAetCK,iBAduBL,YAAa,6BAepCM,sBAb4BN,YAAa,kCAczCO,sBAb4BP,YAAa,kCAczCQ,oBAb0BR,YAAa,gCAcvCS,eAZqBT,YAAa,oBCV9BU,EAAQC,YAAc,IAAD,mBACxBC,EAAOX,oBAAqB,SAACY,EAAD,YAAMC,WADV,cAExBF,EAAOR,oBAAqB,SAACW,EAAD,OAAUD,EAAV,EAAUA,QAAV,4BAA4BC,GAA5B,CAAmCD,OAFvC,cAGxBF,EAAOL,uBAAwB,SAACQ,EAAD,OAAUD,EAAV,EAAUA,QAAV,OAC9BC,EAAMC,QAAO,qBAAGC,KAAgBH,QAJT,IAOrBE,EAASL,YAAc,GAAD,eACzBC,EAAOH,gBAAiB,SAACI,EAAD,YAAMC,YAOlBI,EALSC,YAAgB,CACtCT,QACAM,W,OCHII,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MASaC,EANDC,YAAe,CAC3BC,QAAS,CAAEC,QAASC,GACpBf,aACAgB,UAAUC,I,8BCJGC,EAlBE,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACxB,OACE,kCACYC,IAATF,GACCA,EAAKG,KAAI,YAA2B,IAAxBzB,EAAuB,EAAvBA,GAAI0B,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACpB,OACE,+BACE,qCAAQD,EAAR,SACA,qCAAQC,KACR,wBAAQC,KAAK,SAASC,QAAS,kBAAMN,EAASvB,IAA9C,0DAHOA,S,wBCNrB8B,IAAMC,SAASC,QAAU,wBAEzB,IAwBe,EAhBI,SAACC,GAAD,OAAS,SAACC,GAC3BA,EAASvC,EAAOT,sBAChB4C,IACGK,KAAK,YAAaF,GAClBG,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAASvC,EAAOR,mBAAmBkD,OACtDC,OAAM,SAACC,GAAD,OAAWL,EAASvC,EAAOP,iBAAiBmD,SAWxC,EARO,SAACvC,GAAD,OAAQ,SAACkC,GAC7BA,EAASvC,EAAON,yBAChByC,IACGU,OADH,oBACuBxC,IACpBoC,MAAK,kBAAMF,EAASvC,EAAOL,sBAAsBU,OACjDsC,OAAM,SAACC,GAAD,OAAW5C,EAAOJ,oBAAoBgD,QAGlC,EAxBK,kBAAM,SAACL,GACzBA,EAASvC,EAAOb,sBAChBgD,IACGW,IAAI,aACJL,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,EAASvC,EAAOX,mBAAmBqD,OACtDC,OAAM,SAACC,GAAD,OAAWL,EAASvC,EAAOV,iBAAiBsD,S,QCRjDG,EAAc,SAAC5C,GACnB,OAAOA,EAAMmB,QAAQxB,OAEjBkD,EAAY,SAAC7C,GAAD,OAAWA,EAAMmB,QAAQlB,QAW5B,GAAE2C,cAAaC,YAAWC,mBATdC,YACzB,CAACH,EAAaC,IACd,SAACG,EAAU/C,GACT,OAAO+C,EAAS/C,QAAO,SAACkB,GAAD,OACrBA,EAAQS,KAAKqB,cAAcC,SAASjD,EAAOgD,sB,iBCwDlCE,cAAQ,MAHI,SAACf,GAAD,MAAe,CACxCgB,kBAAmB,SAACjB,GAAD,OAASC,EAASiB,EAA8BlB,QAEtDgB,EA7DK,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,kBAAmBJ,EAAe,EAAfA,SAAe,EACzBM,mBAAS,CACrC1B,KAAM,GACNC,OAAQ,KAH6C,mBAChDV,EADgD,KACvCoC,EADuC,KAsBvD,OACE,sBAAKC,UAAWC,IAAOC,cAAvB,UACE,sBAAKF,UAAWC,IAAOE,UAAvB,UACE,+CACA,uBACE7B,KAAK,OACL8B,KAAK,OACLC,MAAO1C,EAAQS,KACfkC,SAAU,SAACC,GACTR,GAAW,SAACpC,GAAD,mBAAC,eACPA,GADM,kBAER4C,EAAMC,OAAOJ,KAAOG,EAAMC,OAAOH,iBAK1C,sBAAKL,UAAWC,IAAOE,UAAvB,UACE,iDACA,uBACE7B,KAAK,OACL8B,KAAK,SACLC,MAAO1C,EAAQU,OACfiC,SAAU,SAACC,GACTR,GAAW,SAACpC,GAAD,mBAAC,eACPA,GADM,kBAER4C,EAAMC,OAAOJ,KAAOG,EAAMC,OAAOH,iBAK1C,wBAAQ/B,KAAK,SAASC,QA/CP,WACjB,IAAMkC,EAAkBjB,EAASrB,KAAI,SAACuC,GAAD,OAAUA,EAAKtC,QACpD,MAA4B,KAAxBT,EAAQgD,aAAyC,KAAnBhD,EAAQU,OACjCuC,MAAM,kOAGVH,EAAgBf,SAAS/B,EAAQS,MAO7BwC,MAAM,kSANbhB,EAAkBjC,QAClBoC,EAAW,CACT3B,KAAM,GACNC,OAAQ,OAqCiC2B,UAAWC,IAAOY,OAA7D,+G,iBCbSlB,eATS,SAACnD,GAAD,MAAY,CAClCgD,SAAUsB,EAAkBxB,mBAAmB9C,OAEtB,SAACoC,GAAD,MAAe,CACxCX,SAAU,SAACvB,GAAD,OAAQkC,EAASiB,EAAiCnD,KAC5DqE,SAAU,SAAC3C,GAAD,OAAUQ,EAASoC,EAAgB9E,eAAekC,KAC5D6C,aAAc,kBAAMrC,EAASiB,SAGhBF,EAhCK,SAAC,GAAoD,IAAlDH,EAAiD,EAAjDA,SAAUyB,EAAuC,EAAvCA,aAAchD,EAAyB,EAAzBA,SAAU8C,EAAe,EAAfA,SAAe,EAClCjB,mBAAS,IADyB,mBAC/DoB,EAD+D,KACnDC,EADmD,KAOtE,OALAC,qBAAU,WACRL,EAASG,GACTD,MACC,CAACC,IAGF,sBAAKlB,UAAU,YAAf,UACE,uBACE1B,KAAK,OACL0B,UAAWC,IAAOoB,gBAClBC,YAAY,iCACZhB,SAAU,SAACiB,GACTJ,EAAcI,EAAEC,cAAcnB,UAGlC,cAAC,EAAD,CAAab,SAAUA,IACvB,cAAC,EAAD,CAAUxB,KAAMwB,EAAUvB,SAAUA,UCrB3BwD,EAPH,WACV,OACE,mCACE,cAAC,EAAD,OCCNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUpE,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJqE,SAASC,eAAe,W","file":"static/js/main.0a0aa5fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"conteiner\":\"ContactForm_conteiner__DTKbs\",\"mainConteiner\":\"ContactForm_mainConteiner__39RSz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputTextFilter\":\"ListContact_inputTextFilter__1cgU_\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst getContactsRequest = createAction(\"contacts/getContactsRequest\");\r\nconst getContactsSuccess = createAction(\"contacts/getContactsSuccess\");\r\nconst getContactsError = createAction(\"contacts/getContactsError\");\r\n\r\nconst addContactsRequest = createAction(\"contacts/addContactsRequest\");\r\nconst addContactsSuccess = createAction(\"contacts/addContactsSuccess\");\r\nconst addContactsError = createAction(\"contacts/addContactsError\");\r\n\r\nconst deleteContactsRequest = createAction(\"contacts/deleteContactsRequest\");\r\nconst deleteContactsSuccess = createAction(\"contacts/deleteContactsSuccess\");\r\nconst deleteContactsError = createAction(\"contacts/deleteContactsError\");\r\n\r\nconst filterContacts = createAction(\"contacts/Filter\");\r\n\r\nexport default {\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  filterContacts,\r\n};","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport action from \"./contacts-action\";\r\n\r\nconst items = createReducer([], {\r\n  [action.getContactsSuccess]: (_, { payload }) => payload,\r\n  [action.addContactsSuccess]: (state, { payload }) => [...state, payload],\r\n  [action.deleteContactsSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [action.filterContacts]: (_, { payload }) => payload,\r\n});\r\nconst contactsReducer = combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport Reducer from \"./partOfRedux/contacts-reducer\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n// import storage from \"redux-persist/lib/storage\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: { contact: Reducer },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListItem = ({ mass, onDelete }) => {\r\n  return (\r\n    <ul>\r\n      {mass !== undefined &&\r\n        mass.map(({ id, text, number }) => {\r\n          return (\r\n            <li key={id}>\r\n              <span> {text} : </span>\r\n              <span> {number}</span>\r\n              <button type=\"button\" onClick={() => onDelete(id)}>\r\n                Удалить\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n};\r\nexport default ListItem;\r\n\r\nListItem.propTypes = {\r\n  mass: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n};\r\n","import axios from \"axios\";\r\nimport action from \"./contacts-action\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst getContacts = () => (dispatch) => {\r\n  dispatch(action.getContactsRequest());\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(action.getContactsSuccess(data)))\r\n    .catch((error) => dispatch(action.getContactsError(error)));\r\n};\r\n\r\nconst addContact = (obj) => (dispatch) => {\r\n  dispatch(action.addContactsRequest());\r\n  axios\r\n    .post(\"/contacts\", obj)\r\n    .then(({ data }) => dispatch(action.addContactsSuccess(data)))\r\n    .catch((error) => dispatch(action.addContactsError(error)));\r\n};\r\n\r\nconst deleteContact = (id) => (dispatch) => {\r\n  dispatch(action.deleteContactsRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(action.deleteContactsSuccess(id)))\r\n    .catch((error) => action.deleteContactsError(error));\r\n};\r\n\r\nexport default { addContact, deleteContact, getContacts };","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = (state) => {\r\n  return state.contact.items;\r\n};\r\nconst getFilter = (state) => state.contact.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.text.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\n\r\nexport default { getContacts, getFilter, getVisibleContacts };\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { contactsOperations } from \"../../redux/partOfRedux\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nconst ContactForm = ({ addContactToRedux, contacts }) => {\r\n  const [contact, setContact] = useState({\r\n    text: \"\",\r\n    number: \"\",\r\n  });\r\n  const addContact = () => {\r\n    const includeContacts = contacts.map((item) => item.text);\r\n    if (contact.nameContact === \"\" || contact.number === \"\") {\r\n      return alert(\"Пожалуйста введите все данные в поля формы\");\r\n    }\r\n\r\n    if (!includeContacts.includes(contact.text)) {\r\n      addContactToRedux(contact);\r\n      setContact({\r\n        text: \"\",\r\n        number: \"\",\r\n      });\r\n    } else {\r\n      return alert(\"Данные в полях формы уже существуют, введите другое имя\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.mainConteiner}>\r\n      <div className={styles.conteiner}>\r\n        <label>Input name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"text\"\r\n          value={contact.text}\r\n          onChange={(event) => {\r\n            setContact((contact) => ({\r\n              ...contact,\r\n              [event.target.name]: event.target.value,\r\n            }));\r\n          }}\r\n        ></input>\r\n      </div>\r\n      <div className={styles.conteiner}>\r\n        <label>Input number</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          value={contact.number}\r\n          onChange={(event) => {\r\n            setContact((contact) => ({\r\n              ...contact,\r\n              [event.target.name]: event.target.value,\r\n            }));\r\n          }}\r\n        ></input>\r\n      </div>\r\n      <button type=\"button\" onClick={addContact} className={styles.button}>\r\n        Добавить контакт\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContactToRedux: (obj) => dispatch(contactsOperations.addContact(obj)),\r\n});\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  addContactToRedux: PropTypes.func,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ListItem from \"../ListItem\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ContactForm from \"../ContactForm\";\r\nimport styles from \"./ListContact.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  contactsSelectors,\r\n  contactsOperations,\r\n  contactsActions,\r\n} from \"../../redux/partOfRedux\";\r\n\r\nconst ListContact = ({ contacts, ListContacts, onDelete, onFilter }) => {\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  useEffect(() => {\r\n    onFilter(filterText);\r\n    ListContacts();\r\n  }, [filterText]);\r\n\r\n  return (\r\n    <div className=\"blockText\">\r\n      <input\r\n        type=\"text\"\r\n        className={styles.inputTextFilter}\r\n        placeholder=\"фильт\"\r\n        onChange={(e) => {\r\n          setFilterText(e.currentTarget.value);\r\n        }}\r\n      ></input>\r\n      <ContactForm contacts={contacts} />\r\n      <ListItem mass={contacts} onDelete={onDelete} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDelete: (id) => dispatch(contactsOperations.deleteContact(id)),\r\n  onFilter: (text) => dispatch(contactsActions.filterContacts(text)),\r\n  ListContacts: () => dispatch(contactsOperations.getContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListContact);\r\n\r\nListContact.propTypes = {\r\n  massOfContacts: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n  onFilter: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport ListContact from \"./component/ListContact\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <ListContact />\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}